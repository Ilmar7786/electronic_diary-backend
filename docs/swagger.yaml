definitions:
  api.ParseErrorType:
    additionalProperties:
      type: string
    type: object
  api.Response:
    properties:
      message:
        type: string
    type: object
  api.ResponseError:
    properties:
      error:
        type: string
    type: object
  api.ResponseErrors:
    properties:
      errors:
        items:
          $ref: '#/definitions/api.ParseErrorType'
        type: array
    type: object
  auth.Tokens:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  dto.CreateUserDTO:
    properties:
      address:
        maxLength: 255
        type: string
      email:
        maxLength: 100
        type: string
      isActive:
        default: false
        type: boolean
      isSuperUser:
        default: false
        type: boolean
      name:
        maxLength: 40
        minLength: 1
        type: string
      password:
        maxLength: 30
        type: string
      patronymic:
        maxLength: 40
        minLength: 1
        type: string
      phone:
        maxLength: 30
        type: string
      role:
        enum:
        - STUDENT
        - TEACHER
        - PARENT
        type: string
      surname:
        maxLength: 40
        minLength: 1
        type: string
    required:
    - address
    - email
    - name
    - password
    - patronymic
    - phone
    - role
    - surname
    type: object
  dto.RefreshTokenDTO:
    properties:
      token:
        type: string
    type: object
  dto.SignInDTO:
    properties:
      email:
        description: '@required Обязательное поле'
        type: string
      password:
        description: '@required Обязательное поле'
        type: string
      remember:
        type: boolean
    type: object
  dto.UpdateUserDTO:
    properties:
      address:
        type: string
      email:
        type: string
      isActive:
        type: boolean
      isSuperUser:
        type: boolean
      name:
        type: string
      password:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      role:
        enum:
        - STUDENT
        - TEACHER
        - PARENT
        type: string
      surname:
        type: string
    type: object
  user.Model:
    properties:
      address:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isSuperUser:
        type: boolean
      name:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        enum:
        - STUDENT
        - TEACHER
        - PARENT
      surname:
        type: string
      updatedAt:
        type: string
    type: object
  user.Role:
    enum:
    - TEACHER
    - STUDENT
    - PARENT
    type: string
    x-enum-varnames:
    - TeacherRole
    - StudentRole
    - ParentRole
info:
  contact: {}
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.Model'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Список пользователей
      tags:
      - Администратор
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создать пользователя
      tags:
      - Администратор
  /admin/users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Индефикатор пользователя
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удалить пользователя
      tags:
      - Администратор
    patch:
      consumes:
      - application/json
      parameters:
      - description: Индефикатор пользователя
        in: path
        name: userId
        required: true
        type: string
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновить пользователя
      tags:
      - Администратор
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseErrors'
      summary: Обновление токена
      tags:
      - Аунтификация
  /auth/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.SignInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseErrors'
      summary: Авторизация
      tags:
      - Аунтификация
  /user/info:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информация о пользователи
      tags:
      - Пользователь
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
